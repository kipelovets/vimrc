snippet prif
	private function ${1}(${3}): void
	{
		${0:${VISUAL}}
	}

snippet pubf
	public function ${1}(${3}): void
	{
		${0:${VISUAL}}
	}

snippet constr
	public function __construct(${0})
	{
		${1}
	}

snippet <?php
	<?php

	declare(strict_types=1);

	namespace ${1:`substitute(substitute(expand("%:h"), '\v^\w+\/(\u)', '\1', ''), '\/', '\\\', 'g')`};

	class ${0:`vim_snippets#Filename()`}
	{

	}
snippet /*
	/**
	 * ${0}
	 */

# phpunit - from https://github.com/honza/vim-snippets/blob/master/snippets/php.snippets
snippet ase "$this->assertEquals($a, $b)"
	\$this->assertEquals(${1:$expected}, ${2:$actual});
snippet asne "$this->assertNotEquals($a, $b)"
	\$this->assertNotEquals(${1:$expected}, ${2:$actual});
snippet asf "$this->assertFalse($a)"
	\$this->assertFalse(${1});
snippet ast "$this->assertTrue($a)"
	\$this->assertTrue(${1});
snippet asfex "$this->assertFileExists('path/to/file')"
	\$this->assertFileExists(${1:'path/to/file'});
snippet asfnex "$this->assertFileNotExists('path/to/file')"
	\$this->assertFileNotExists(${1:'path/to/file'});
snippet ascon "$this->assertContains($needle, $haystack)"
	\$this->assertContains(${1:$needle}, ${2:$haystack});
snippet asncon "$this->assertNotContains($needle, $haystack)"
	\$this->assertNotContains(${1:$needle}, ${2:$haystack});
snippet ascono "$this->assertContainsOnly($needle, $haystack)"
	\$this->assertContainsOnly(${1:$needle}, ${2:$haystack});
snippet asconoi "$this->assertContainsOnlyInstancesOf(Example::class, $haystack)"
	\$this->assertContainsOnlyInstancesOf(${1:Example}::class, ${2:$haystack});
snippet ashk "$this->assertArrayHasKey($key, $array)"
	\$this->assertArrayHasKey(${1:$key}, ${2:$array});
snippet asnhk "$this->assertArrayNotHasKey($key, $array)"
	this->assertArrayNotHasKey(${1:$key}, ${2:$array});
snippet ascha "$this->assertClassHasAttribute($name, Example::class)"
	\$this->assertClassHasAttribute(${1:$attributeName}, ${2:Example}::class);
snippet asi "$this->assertInstanceOf(Example::class, $actual)"
	\$this->assertInstanceOf(${1:Example}::class, ${2:$actual});
snippet asit "$this->assertInternalType('string', $actual)"
	\$this->assertInternalType(${1:'string'}, ${2:actual});
snippet asco "$this->assertCount($count, $haystack)"
	\$this->assertCount(${1:$expectedCount}, ${2:$haystack});
snippet asnco "$this->assertNotCount($count, $haystack)"
	\$this->assertNotCount(${1:$count}, ${2:$haystack});
snippet assub "$this->assertArraySubset($subset, $array)"
	\$this->assertArraySubset(${1:$subset}, ${2:$array});
snippet asnu "$this->assertNull($a)"
	\$this->assertNull(${1});
snippet asnnu "$this->assertNotNull($a)"
	\$this->assertNotNull(${1});
snippet test "public function testXYZ() { ... }"
	public function test${1}()
	{
		${0:${VISUAL}}
	}
snippet setup "protected function setUp() { ... }"
	protected function setUp()
	{
		${0:${VISUAL}}
	}
snippet teardown "protected function tearDown() { ... }"
	protected function tearDown()
	{
		${0:${VISUAL}}
	}
snippet mock "$mock = $this->createMock(SomeClass::class);"
	$${1:mock} = $this->createMock(${2:SomeClass}::class);
snippet exp "phpunit expects"
	expects($this->${1:once}())
		->method('${2}')
		->with(${3})
		->willReturn(${4});
